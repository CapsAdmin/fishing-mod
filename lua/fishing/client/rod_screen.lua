local function LimitPos(pos, dir, ply)	local trace_forward = util.TraceHull({		start = ply:EyePos(),		endpos = pos,		mins = ply:OBBMins() / 2,		maxs = ply:OBBMaxs() / 2,		filter = ents.FindInSphere(pos, 300),		mask = MASK_SOLID_BRUSHONLY,	})	if trace_forward.Hit and trace_forward.Entity ~= ply and not trace_forward.Entity:IsPlayer() and not trace_forward.Entity:IsVehicle() then		return trace_forward.HitPos + trace_forward.HitNormal * 1	end	return posendlocal rot_ang = Angle(0, 0, 0)hook.Add("CreateMove", "fishing", function(cmd)	if not fishing.IsFishing() then return end	local wep = LocalPlayer():GetActiveWeapon()	local delta = FrameTime()	if cmd:KeyDown(IN_JUMP) then		rot_ang.p = math.NormalizeAngle(rot_ang.p - cmd:GetMouseY() * delta)		rot_ang.y = math.NormalizeAngle(rot_ang.y - cmd:GetMouseX() * delta)	end		end)local params = {}local SIZE = 256local SPACING = SIZE / 16fishing.RTTexture = GetRenderTarget("fishing_RT", SIZE, SIZE, false)fishing.RTMaterial = CreateMaterial("fishing_rt_mat", "VertexLitGeneric", {})fishing.RTMaterial:SetTexture("$basetexture", fishing.RTTexture)local noise_1 = Material("Effects/tvscreen_noise001a.vmt")local noise_2 = Material("Effects/tvscreen_noise002a.vmt")local background = fishing.GetMaterialFromURL("http://dl.dropbox.com/u/244444/pokemon128x128.png")local arrow = fishing.GetMaterialFromURL("http://dl.dropbox.com/u/244444/pokemon_arrow.png")local noise_soundlocal selected_i = 1local last_select = 0local scroll = 0surface.CreateFont(	"fishing_inventory_font",	{		font 		= "System",		size 		= 27,		weight 		= 1,	})hook.Add("PlayerBindPress", "fishing", function(ply, bind, press)	if press and fishing.IsFishing(ply) then 		if bind == "+use" then			local item = fishing.GetPlayerInventorySorted()[selected_i]				if item then				RunConsoleCommand("fishing_pickup_item", item.name)			end			return true		elseif bind == "undo" then			RunConsoleCommand("fishing_pickup_item")			return true		elseif bind == "+reload" then			RunConsoleCommand("fishing_release_item")			return true		elseif bind == "+menu" then			fishing.ScreenFocus = not fishing.ScreenFocus			return true		end	end				end) hook.Add("RenderScene", "fishing", function()	if not fishing.IsFishing() then 		selected_i = 1		last_select = 0		scroll = 0	return end	local ply = LocalPlayer()	local wep = ply:GetActiveWeapon()	local ent = wep.dt.hook	if not ent:IsValid() then return end	local old, w, h = render.GetRenderTarget(), ScrW(), ScrH()	render.SetRenderTarget(fishing.RTTexture)		render.Clear(0, 0, 0, 255, false)		render.SetViewPort(0, 0, SIZE, SIZE)			cam.Start2D()				if wep.dt.length > 1 then					local pos = ent:GetPos()					local ang					local dir					if ply:KeyDown(IN_JUMP) then						dir = Vector(1,0,0) * -50						dir:Rotate(rot_ang)					else						dir = (pos - ply:EyePos()):GetNormalized() * -50					end					pos = pos + dir					ang = (ent:GetPos() - pos)					pos = LimitPos(pos, ang, ent)					params.origin = pos					params.angles = ang:Angle()					params.x = 0					params.y = 0					params.w = SIZE					params.h = SIZE					params.znear = 0.5					render.RenderView(params)				else					surface.SetDrawColor(255, 255, 255, 255)					surface.DrawRect(0, 0, SIZE, SIZE)					surface.SetMaterial(background)					surface.DrawTexturedRect(0, 0, SIZE, SIZE)				end				if wep.dt.length > 1 and fishing.ScreenFocus then					if not noise_sound then						--noise_sound = CreateSound(ply, "ambient/gas/steam2.wav")						--noise_sound:SetSoundLevel(80)					end					local pos = ply:EyePos() + ply:GetForward() * 180					local tension = wep.dt.hook:GetPos():Distance(pos) / wep.dt.length					fishing.LineTension = tension					if tension > 1.12 or wep.dt.snapped then						local vol = math.Clamp(tension/20, 0, 1) ^ 2						if vol == 0 then							--noise_sound:Stop()						else							--noise_sound:PlayEx(vol, 50+math.sin(os.clock()))						end					end				end								if wep.dt.length == 1 then					local items = fishing.GetPlayerInventorySorted()									if items then						local current_height = SPACING						local i = 1												for _i=1 + scroll, #items do															local data = items[_i]														if not data then continue end														surface.SetFont("fishing_inventory_font")													local w,h = surface.GetTextSize(data.name)														surface.SetTextColor(0, 0, 0, 255)							surface.SetTextPos(SPACING * 2, current_height)							surface.DrawText(data.name)														if selected_i == i then								surface.SetMaterial(arrow)								surface.DrawTexturedRect(SPACING, current_height+(h*0.5)-2, 4, 4)							end														local w,h = surface.GetTextSize(data.count)							surface.SetTextPos(SIZE - SPACING - w , current_height)							surface.DrawText(data.count)														local w,h = surface.GetTextSize("x")							surface.SetTextPos(SIZE - SPACING*3 - w, current_height)							surface.DrawText("x")													i = i + 1													if current_height + h + SPACING * 2 > SIZE then								break							else								current_height = current_height + h							end						end												if last_select < os.clock() then							if input.IsKeyDown(KEY_UP)then								if selected_i-1 < 1 then									scroll = scroll - 1								end															selected_i = selected_i - 1								last_select = os.clock() + 0.1							elseif input.IsKeyDown(KEY_DOWN) then								if selected_i+2 > i then									scroll = scroll + 1								else									selected_i = selected_i + 1								end																last_select = os.clock() + 0.1							end						end												selected_i = math.Clamp(selected_i, 1, #items)					end				else					surface.SetMaterial((wep.dt.snapped or fishing.LineTension > 20) and noise_1 or noise_2)					surface.SetDrawColor(0, 255, 0, (fishing.LineTension - 1) * 255)					surface.DrawTexturedRect(0, 0, SIZE, SIZE)												end			cam.End2D()		render.SetViewPort(0, 0, w, h)	render.SetRenderTarget(old)end)