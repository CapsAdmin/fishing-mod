local function LimitPos(pos, dir, ply)	local trace_forward = util.TraceHull({		start = ply:EyePos(),		endpos = pos,		mins = ply:OBBMins() / 2,		maxs = ply:OBBMaxs() / 2,		filter = ents.FindInSphere(pos, 300),		mask = MASK_SOLID_BRUSHONLY,	})	if trace_forward.Hit and trace_forward.Entity ~= ply and not trace_forward.Entity:IsPlayer() and not trace_forward.Entity:IsVehicle() then		return trace_forward.HitPos + trace_forward.HitNormal * 1	end	return posendlocal rot_ang = Angle(0, 0, 0)hook.Add("CreateMove", "fishing", function(cmd)	if not fishing.IsFishing() then return end	local wep = LocalPlayer():GetActiveWeapon()	local delta = FrameTime()	if cmd:KeyDown(IN_JUMP) then		rot_ang.p = math.NormalizeAngle(rot_ang.p - cmd:GetMouseY() * delta)		rot_ang.y = math.NormalizeAngle(rot_ang.y - cmd:GetMouseX() * delta)	end		end)local params = {}local SIZE = 256local SPACING = SIZE / 16local noise_1 = Material("effects/tvscreen_noise001a.vmt")local noise_2 = Material("effects/tvscreen_noise002a.vmt")local background = Material("fishing_mod/inventory.png")local top = Material("fishing_mod/inventory_top.png")local arrow = fishing.GetMaterialFromURL("http://dl.dropbox.com/u/244444/pokemon_arrow.png", 32)local noise_soundlocal selected_i = 1local last_select = 0local scroll = 0local page = 0local cs_model = NULLsurface.CreateFont(	"fishing_inventory_font",	{		font 		= "System",		size 		= 27,		weight 		= 1,	})hook.Add("PlayerBindPress", "fishing", function(ply, bind, press)	if press and fishing.IsFishing(ply) then 		if bind == "+use" then			local item = fishing.GetPlayerInventorySorted()[selected_i]			if item then				RunConsoleCommand("fishing_pickup_item", item.name)			else				RunConsoleCommand("fishing_pickup_item")			end			return true		elseif bind == "undo" then			RunConsoleCommand("fishing_pickup_item")			return true		elseif bind == "+reload" then			RunConsoleCommand("fishing_release_item")			return true		elseif bind == "+menu" then			fishing.ScreenFocus = not fishing.ScreenFocus			return true		end	end				 end) local function draw_text(x, y, str, r,g,b,a, a2)	surface.SetTextPos(x+1, y+1)	surface.SetTextColor(0,0,128,a2 or 80)					surface.DrawText(str)	surface.SetTextColor(r or 20,g or 40, b or 80, a or 255)					surface.SetTextPos(x, y)	surface.DrawText(str)endlocal last = 0local last_model = ""local white = Material("models/debug/debugwhite")hook.Add("Think", "fishing", function()	if last > SysTime() then		return 	else		last = SysTime() + 1/15	end	if not fishing.IsFishing() then 		selected_i = 1		last_select = 0		scroll = 0	return end		if not fishing.RTTexture then		fishing.RTTexture = GetRenderTarget("fishing_RT", SIZE, SIZE, false)		fishing.RTMaterial = CreateMaterial("fishing_rt_mat", "VertexLitGeneric", {})		fishing.RTMaterial:SetTexture("$basetexture", fishing.RTTexture)	end	local ply = LocalPlayer()	local wep = ply:GetActiveWeapon()	local ent = wep.dt.hook	if not ent:IsValid() then return end	local old, w, h = render.GetRenderTarget(), ScrW(), ScrH()	render.SetRenderTarget(fishing.RTTexture)		render.Clear(0, 0, 0, 255, false)		render.SetViewPort(0, 0, SIZE, SIZE)			cam.Start2D()				if wep.dt.length > 1 then					local pos = ent:GetPos()					local ang = (ent:GetAngles():Up()*-1):Angle()					pos = pos + ent:GetUp() * 4 - ent:GetRight()					pos = LimitPos(pos, ang, ent)					params.origin = pos					params.angles = ang					params.fov = 150					params.x = 0					params.y = 0					params.w = SIZE					params.h = SIZE					params.znear = 0.1					pac.ForceRendering(true)						render.RenderView(params)					pac.ForceRendering(false)										surface.SetFont("fishing_inventory_font")																	local str = string.format("length = %i", wep.dt.length)					local w,h = surface.GetTextSize(str)										surface.SetDrawColor(255, 255, 255, 255)					surface.SetMaterial(top)					surface.DrawTexturedRect(0,0, SIZE,SIZE)										draw_text(4,0,str)				else					surface.SetDrawColor(255, 255, 255, 250)					surface.SetMaterial(background)					surface.DrawTexturedRect(0, 0, SIZE, SIZE)				end				if wep.dt.length > 1 and fishing.ScreenFocus then					if not noise_sound then						--noise_sound = CreateSound(ply, "ambient/gas/steam2.wav")						--noise_sound:SetSoundLevel(80)					end					local pos = ply:EyePos() + ply:GetForward() * 180					local tension = wep.dt.hook:GetPos():Distance(pos) / wep.dt.length					fishing.LineTension = tension					if tension > 1.12 or wep.dt.snapped then						local vol = math.Clamp(tension/20, 0, 1) ^ 2						if vol == 0 then							--noise_sound:Stop()						else						--	noise_sound:PlayEx(vol, 50+math.sin(os.clock()))						end					end				end								if wep.dt.length == 1 then										surface.SetFont("fishing_inventory_font")					local w = surface.GetTextSize("BAIT")					draw_text(SIZE / 2 - w/2,SPACING-5, "BAIT")										local items = fishing.GetPlayerInventorySorted()									if items then						local current_height = SPACING * 3						local i = 1												for _i=1, #items do															local data = items[_i + math.Clamp(scroll, 1, #items)]														if not data then continue end														local w,h = surface.GetTextSize(data.name)							draw_text(SPACING * 2, current_height, data.name)														if selected_i == i then																local w,h = surface.GetTextSize(">")								draw_text(SPACING, current_height, ">")							end														local w,h = surface.GetTextSize(data.count)							draw_text(SIZE - SPACING*1.5 - w, current_height, data.count)														local w,h = surface.GetTextSize("x")							draw_text(SIZE - SPACING*3 - w, current_height, "x")														local height = SIZE-SPACING * 4																		if selected_i == i then								surface.SetTextColor(255, 255, 255, 255)								local class = fishing.RegisteredBait[data.name] or fishing.RegisteredFish[data.name]																local description = class and class.Description or "??????????????????????\n??????????????????????\n??????????????????????" 								local mdl = class and class.Model or "models/error.mdl"																if mdl then									if mdl ~= last_model then										if not cs_model:IsValid() then											cs_model = ClientsideModel(mdl)											cs_model:SetNoDraw(true)										else											cs_model:SetModel(mdl)										end										last_model = mdl									end																		local pos = Vector(1,1,1) * (cs_model:BoundingRadius() * 100) 									render.SuppressEngineLighting( true )									local center = cs_model:OBBCenter()																											render.ClearDepth()																		cam.IgnoreZ(true)																		cam.Start3D(pos, (center - pos):Angle(), 0.9, 8, SIZE - 50, 50,35)																				render.MaterialOverride(white)										render.SetColorModulation(0.25, 0.25, 0.25)										cs_model:SetAngles(Angle(0,SysTime() * -50,0))										cs_model:DrawModel()									cam.End3D()																		render.ClearDepth()																		cam.Start3D(pos, (center - pos):Angle(), 1, 8, SIZE - 50, 50,35)																				render.MaterialOverride()										render.SetColorModulation(1,1,1)										cs_model:SetAngles(Angle(0,SysTime() * -50,0))										cs_model:DrawModel()									cam.End3D()																		cam.IgnoreZ(false)									render.SuppressEngineLighting( false )								end																if description then									local last_h = height									for _, line in pairs(description:Split("\n")) do										local w, h = surface.GetTextSize(line)										draw_text(SPACING * 4.2, last_h + SPACING/3, line, 255, 255, 255, 255, 128)										last_h = last_h + h									end								end							end													i = i + 1													if current_height + h + SPACING * 6 > SIZE then								break							else								current_height = current_height + h							end						end												if last_select < os.clock() then							if input.IsKeyDown(KEY_LEFT) then															last_select = os.clock() + 0.1								LocalPlayer():EmitSound("weapons/sniper/sniper_zoomin.wav", 50, 140)							elseif input.IsKeyDown(KEY_RIGHT) then																last_select = os.clock() + 0.1								LocalPlayer():EmitSound("weapons/sniper/sniper_zoomin.wav", 50, 140)							end													if input.IsKeyDown(KEY_UP)then								if selected_i-1 < 1 then									scroll = scroll - 1								end															selected_i = selected_i - 1								last_select = os.clock() + 0.1								LocalPlayer():EmitSound("buttons/blip1.wav", 30, 255)														elseif input.IsKeyDown(KEY_DOWN) then								if selected_i+2 > i then									scroll = scroll + 1								else									selected_i = selected_i + 1								end									last_select = os.clock() + 0.1								LocalPlayer():EmitSound("buttons/blip1.wav", 30, 255)														end													end												selected_i = math.Clamp(selected_i, 1, #items)					end				else					surface.SetMaterial((wep.dt.snapped or fishing.LineTension > 20) and noise_1 or noise_2)					surface.SetDrawColor(0, 255, 0, (fishing.LineTension - 1) * 255)					surface.DrawTexturedRect(0, 0, SIZE, SIZE)												end			cam.End2D()		render.SetViewPort(0, 0, w, h)	render.SetRenderTarget(old)end)