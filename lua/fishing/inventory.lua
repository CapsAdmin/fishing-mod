function fishing.GetPlayerInventorySorted(ply)	local temp = {}	ply = ply or LocalPlayer()		local inventory = fishing.GetStats(ply).inventory		if inventory then		for name, count in pairs(inventory) do			table.insert(temp, {name = name, count = count})		end				table.sort(temp, function(a,b) return a.name < b.name end)	end		return tempendfunction fishing.GetPlayerInventory(ply)	local temp = {}	ply = ply or LocalPlayer()		return fishing.GetStats(ply).inventory or {}endlocal function populate(list)	list:Clear()	local items = fishing.GetPlayerInventorySorted()	if items then		for _, data in pairs(items) do			local nice_name			local type			local description			local ENT = scripted_ents.Get(data.name)			if ENT then				nice_name = (ENT.PrintName and #ENT.PrintName ~= 0 and ENT.PrintName) or data.name:gsub("fishing_", ""):gsub("_", " ")				type = ENT.IsFishingBait and "bait" or ENT.IsFishingFish and "fish" or "unknown"				description = (ENT.Description or ENT.Instructions and #ENT.Instructions ~=0 and ENT.Instructions) or "no description"			end			local pnl = list:AddLine(data.count, data.name, type, description)			pnl.fishing_data = {name = data.name, count = data.count}		end		list:FixColumnsLayout()		list.OnClickLine = function(_, line)			if not line.fishing_data then return end			local pnl = DermaMenu()			pnl:SetPos(gui.MousePos())			pnl:AddOption("drop", function()				RunConsoleCommand("fishing_drop_item", line.fishing_data.name)			end)			pnl:MakePopup()		end	endendlocal active_list = NULLlocal last_inventorynet.Receive("fishing_refresh_inventory", function()	if active_list:IsValid() then		timer.Create("fishing_refresh_inventory", 0.1, 0, function()			if not active_list:IsValid() then				timer.Remove("fishing_refresh_inventory")				return			end			local inventory = fishing.GetPlayerInventory()			if inventory ~= last_inventory then				populate(active_list)				last_inventory = inventory				timer.Remove("fishing_refresh_inventory")			end		end)	endend)function fishing.OpenInventory()	if active_list:IsValid() then return end	local frame = vgui.Create("DFrame")	frame:SetSize(ScrW() / 3, ScrH() / 3)	frame:Center()	frame:MakePopup()	frame:SetTitle("inventory")	local list = vgui.Create("DListView", frame)	list:Dock(FILL)	list:AddColumn("count")	list:AddColumn("name")	list:AddColumn("type")	list:AddColumn("description")	populate(list)	active_list = list	last_inventory = fishing.GetPlayerInventory()end